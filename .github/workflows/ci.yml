name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Testing
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Lint code
      run: |
        yarn lint
        yarn lint:fix --dry-run

    - name: Type check
      run: yarn type-check

    - name: Run unit tests
      run: yarn test:unit --coverage
      env:
        CI: true

    - name: Run integration tests
      run: yarn test:integration
      env:
        CI: true
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        NEO4J_URI: bolt://localhost:7687
        NEO4J_USERNAME: neo4j
        NEO4J_PASSWORD: test_password
        REDIS_URL: redis://localhost:6379

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      neo4j:
        image: neo4j:5.13-community
        env:
          NEO4J_AUTH: neo4j/test_password
        options: >-
          --health-cmd "cypher-shell -u neo4j -p test_password 'RETURN 1'"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 3
        ports:
          - 7474:7474
          - 7687:7687

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: quality-gate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Golden Dataset Testing
  golden-dataset-test:
    name: Golden Dataset Testing
    runs-on: ubuntu-latest
    needs: quality-gate
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Build packages
      run: yarn build

    - name: Setup test environment
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30

    - name: Initialize golden dataset
      run: |
        yarn kpc dataset init --samples
        yarn kpc dataset validate

    - name: Run comprehensive test suite
      run: |
        yarn kpc test-suite --all --sample-size 20 --format json html junit
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    - name: Upload test reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports-${{ github.run_number }}
        path: test-reports/

    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Golden Dataset Tests
        path: test-reports/*.xml
        reporter: java-junit

    - name: Cleanup test environment
      if: always()
      run: docker-compose -f docker-compose.test.yml down -v

  # Build and Push Images
  build-images:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [quality-gate, security-scan]
    if: github.event_name != 'pull_request'
    
    outputs:
      api-image: ${{ steps.meta-api.outputs.tags }}
      web-image: ${{ steps.meta-web.outputs.tags }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for API
      id: meta-api
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.api
        push: true
        tags: ${{ steps.meta-api.outputs.tags }}
        labels: ${{ steps.meta-api.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract metadata for Web
      id: meta-web
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Web image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.web
        push: true
        tags: ${{ steps.meta-web.outputs.tags }}
        labels: ${{ steps.meta-web.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images, golden-dataset-test]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig
        export IMAGE_TAG=${{ github.sha }}
        envsubst < k8s/api-deployment.yaml | kubectl apply -f -
        envsubst < k8s/web-deployment.yaml | kubectl apply -f -
        kubectl rollout status deployment/kpc-api -n kpc-staging --timeout=300s
        kubectl rollout status deployment/kpc-web -n kpc-staging --timeout=300s

    - name: Run smoke tests
      run: |
        export KUBECONFIG=kubeconfig
        kubectl port-forward -n kpc-staging svc/kpc-api 3000:3000 &
        sleep 10
        curl -f http://localhost:3000/health || exit 1
        pkill -f "kubectl port-forward"

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: |
          Staging deployment ${{ job.status }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images, golden-dataset-test]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Blue-Green Deployment
      run: |
        export KUBECONFIG=kubeconfig
        export IMAGE_TAG=${{ github.event.release.tag_name }}
        
        # Deploy to green environment
        envsubst < k8s/api-deployment.yaml | sed 's/kpc-api/kpc-api-green/g' | kubectl apply -f -
        envsubst < k8s/web-deployment.yaml | sed 's/kpc-web/kpc-web-green/g' | kubectl apply -f -
        
        # Wait for green deployment to be ready
        kubectl rollout status deployment/kpc-api-green -n kpc-production --timeout=600s
        kubectl rollout status deployment/kpc-web-green -n kpc-production --timeout=600s
        
        # Run health checks on green environment
        kubectl port-forward -n kpc-production svc/kpc-api-green 3000:3000 &
        sleep 10
        curl -f http://localhost:3000/health || exit 1
        pkill -f "kubectl port-forward"
        
        # Switch traffic to green
        kubectl patch service kpc-api -n kpc-production -p '{"spec":{"selector":{"app":"kpc-api-green"}}}'
        kubectl patch service kpc-web -n kpc-production -p '{"spec":{"selector":{"app":"kpc-web-green"}}}'
        
        # Clean up blue environment
        kubectl delete deployment kpc-api -n kpc-production --ignore-not-found=true
        kubectl delete deployment kpc-web -n kpc-production --ignore-not-found=true
        
        # Rename green to blue for next deployment
        kubectl patch deployment kpc-api-green -n kpc-production -p '{"metadata":{"name":"kpc-api"}}'
        kubectl patch deployment kpc-web-green -n kpc-production -p '{"metadata":{"name":"kpc-web"}}'

    - name: Run production smoke tests
      run: |
        export KUBECONFIG=kubeconfig
        kubectl port-forward -n kpc-production svc/kpc-api 3000:3000 &
        kubectl port-forward -n kpc-production svc/kpc-web 3001:3001 &
        sleep 15
        
        # Test API health
        curl -f http://localhost:3000/health || exit 1
        
        # Test Web health
        curl -f http://localhost:3001/api/health || exit 1
        
        # Test core functionality
        curl -f -X POST http://localhost:3000/graphql \
          -H "Content-Type: application/json" \
          -d '{"query":"query { components { id name } }"}' || exit 1
        
        pkill -f "kubectl port-forward"

    - name: Update monitoring dashboards
      run: |
        export KUBECONFIG=kubeconfig
        kubectl apply -f monitoring/grafana/dashboards/ -n kpc-production

    - name: Notify production deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#production'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: |
          🚀 Production deployment ${{ job.status }}
          Version: ${{ github.event.release.tag_name }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          
          Dashboard: https://monitoring.kpc.example.com
          Application: https://kpc.example.com

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: Run performance tests
      run: |
        k6 run --out json=performance-results.json tests/performance/load-test.js
      env:
        API_BASE_URL: https://staging-api.kpc.example.com

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results-${{ github.run_number }}
        path: performance-results.json

    - name: Performance regression check
      run: |
        node scripts/check-performance-regression.js performance-results.json

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
    - name: Clean up old images
      run: |
        # Clean up images older than 30 days
        echo "Cleaning up old container images..."
        # This would typically use GitHub API or registry API to clean up old images

    - name: Clean up test artifacts
      run: |
        echo "Cleaning up test artifacts..."
        # Clean up old test reports, logs, etc.